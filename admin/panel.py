from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from sqlalchemy.orm import joinedload
from admin.auth import is_admin
from database.models import SessionLocal, Channel, RSSSource, Post, User
import json

admin_router = Router()


def get_stats_text():
    db = SessionLocal()
    total_users = db.query(User).count()
    total_channels = db.query(Channel).count()
    active_channels = db.query(Channel).filter(Channel.is_active == True).count()
    total_sources = db.query(RSSSource).count()
    total_posts = db.query(Post).count()
    pending_posts = db.query(Post).filter(Post.status == "pending").count()
    db.close()

    return (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n\n"
        f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n"
        f"<b>üì¢ –ö–∞–Ω–∞–ª–æ–≤:</b> {total_channels} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_channels})\n"
        f"<b>üì∞ RSS –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {total_sources}\n"
        f"<b>üìù –ü–æ—Å—Ç–æ–≤:</b> {total_posts} (–≤ –æ—á–µ—Ä–µ–¥–∏: {pending_posts})"
    )


@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    text = get_stats_text()

    keyboard = [
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_stats")],
        [InlineKeyboardButton(text="üì¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data="all_channels")],
        [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="all_users")]
    ]

    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )


@admin_router.callback_query(F.data == "refresh_stats")
async def refresh_stats_callback(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    text = get_stats_text()

    try:
        await callback.message.edit_text(
            text,
            reply_markup=callback.message.reply_markup,
            parse_mode="HTML"
        )
        await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.")


@admin_router.callback_query(F.data == "all_channels")
async def show_all_channels(callback: CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    db = SessionLocal()
    channels = db.query(Channel).options(joinedload(Channel.owner)).all()
    db.close()

    if not channels:
        await callback.message.edit_text("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    text = "<b>üì¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ:</b>\n\n"
    for channel in channels[:20]:
        status = "üü¢" if channel.is_active else "üî¥"
        owner_info = channel.owner.username if channel.owner and channel.owner.username else f"ID: {channel.owner.telegram_id if channel.owner else 'N/A'}"
        text += f"{status} <b>{channel.channel_name}</b> (<code>{channel.channel_id}</code>)\n"
        text += f"   - –í–ª–∞–¥–µ–ª–µ—Ü: {owner_info}\n"
        text += f"   - –¢–µ–º–∞: {channel.topic}\n\n"

    await callback.message.edit_text(text, parse_mode="HTML")
